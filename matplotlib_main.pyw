#!/usr/bin/env python
#encoding utf-8
#12
# used to parse files more easily
from __future__ import with_statement

# Numpy module
import numpy as np

# for command-line arguments
import sys
import time

#import my sequential clearance grunt.
import sequential_clearance_backend as seq

# Qt4 bindings for core Qt functionalities (non-GUI)
from PyQt4 import QtCore

# Python Qt4 bindings for GUI objects
from PyQt4 import QtGui

import os

if os.name == 'nt': # Windows

    import ctypes
    myappid = 'tesla.sequential_clearance.0.9' # arbitrary string
    ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)
    
# import the MainWindow widget from the converted .ui files
#from ui_sequential_clearance_mainwindow import Ui_MplMainWindow
from ui_matplotlib2 import Ui_MainWindow

#from matplotlib.backends.backend_qt4agg import NavigationToolbar2QTAgg as NavigationToolbar

class DesignerMainWindow(QtGui.QMainWindow, Ui_MainWindow):
    """Customization for Qt Designer created window"""
    def __init__(self, parent = None):
        # initialization of the superclass
        super(DesignerMainWindow, self).__init__(parent)
        # setup the GUI --> function generated by pyuic4
        self.setupUi(self)

        self.initUI()
        
       
    def initUI(self):
        
        self.update_graph()        

        
    def update_graph(self): 
        """Updates the graph"""
        x=[1,4,5,6,7]
        y=[2,3,5,2,5]
        #plot the graph
        self.mplwidget.canvas.ax.clear()
        self.mplwidget.canvas.ax.set_title('First plot')
        #self.mplwidget.axes.plot(x,y)
        self.mplwidget.canvas.draw()
        
        #plot the graph
        #self.mplwidget_2.axes.clear()
        #self.mplwidget_2.axes.set_title('Second plot')
        #self.mplwidget_2.axes.plot(x,y)
        #self.mplwidget_2.axes.grid(True)
        #self.mplwidget_2.axes.set_ylabel('hey')
        #self.mplwidget_2.axes.set_xlabel('ho')
        #self.mplwidget_2.draw()        
        
        #self.mpl_1.canvas.ax.clear()
        #self.mpl_1.canvas.ax.set_title('Margin between incomer and feeders to trip.')
        #self.mpl_1.canvas.ax.set_xlabel('m')  
        #self.mpl_1.canvas.ax.set_ylabel('Seconds')
        
        ##run the fix scale though check button
        ##need to get present scale then apply fix or just apply a fix scale button.
        #self.mpl_1.canvas.ax.set_ylim(0,1.2)
        #self.mpl_1.canvas.ax.plot(m_store,margin_store,antialiased=True,alpha=.5,color='g', marker=',',label='Inc margin second trip')
        #self.mpl_1.canvas.ax.plot(m_store,margin_store4,antialiased=True,alpha=.5,color='b', marker=',',label='Inc margin first trip')
        #self.mpl_1.canvas.ax.grid(True) 
        #self.mpl_1.canvas.ax.axhline(0.4,color='r')
        #self.mpl_1.canvas.ax.legend(loc='best')
        

# create the GUI application
def main():
    import time
    app=QtGui.QApplication(sys.argv)
    app.setOrganizationName("cmoman.ltd")
    app.setOrganizationDomain("blahdeblah.co.nz")
    app.setApplicationName("Sequential Clearance")

    dmw = DesignerMainWindow() # instantiate a window
    # show it
    dmw.show()

    sys.exit(app.exec_())
    
if __name__ == '__main__':
    main()


