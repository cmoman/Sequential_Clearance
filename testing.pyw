#!/usr/bin/env python
#encoding utf-8
#12
# used to parse files more easily
from __future__ import with_statement

# Numpy module
import numpy as np

# for command-line arguments
import sys
import time

#import my sequential clearance grunt.
import sequential_clearance_backend as seq

# Qt4 bindings for core Qt functionalities (non-GUI)
from PyQt4 import QtCore

# Python Qt4 bindings for GUI objects
from PyQt4 import QtGui

import os

if os.name == 'nt': # Windows

    import ctypes
    myappid = 'tesla.sequential_clearance.0.9' # arbitrary string
    ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)
    
# import the MainWindow widget from the converted .ui files
from ui_matplotlib import Ui_MainWindow

class DesignerMainWindow(QtGui.QMainWindow, Ui_MainWindow):
    """Customization for Qt Designer created window"""
    def __init__(self, parent = None):
        # initialization of the superclass
        super(DesignerMainWindow, self).__init__(parent)
        # setup the GUI --> function generated by pyuic4
        self.setupUi(self)

        #self.initUI()
        
def main():
    app=QtGui.QApplication(sys.argv)
    app.setOrganizationName("cmoman.ltd")
    app.setOrganizationDomain("blahdeblah.co.nz")
    app.setApplicationName("Sequential Clearance")
    
    image = QtGui.QImage(400,400,QtGui.QImage.Format_RGB32)
    #image.setColor(2,2)
    #pixmap3=QtGui.QPixmap("images/blank.png")
    #pixmap3=QtGui.QPixmap("images/title.svg")
    pixmap3=QtGui.QPixmap("images/Logo_Export_no_text.png")
    pixmap2=QtGui.QPixmap("images/schematic_from_model_view.svg")
    pixmap=pixmap3.scaled(400,400,1)
    
    splash = QtGui.QSplashScreen(pixmap)
    
    splash.show()

    splash.showMessage(QtCore.QString("Sequential Clearance"),QtCore.Qt.AlignCenter,QtGui.QColor("Black"))

    dmw = DesignerMainWindow() # instantiate a window
    # show it
    dmw.show()
    
    
    
    splash.finish(dmw)
    sys.exit(app.exec_())
    
if __name__ == '__main__':
    main()

